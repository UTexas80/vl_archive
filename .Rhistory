dt[, result := as.numeric(substr(OPTKR, nchar(OPTKR) - 7, nchar(OPTKR))) / 1000]
dx[, result := as.numeric(substr(OPTKR, nchar(OPTKR) - 7, nchar(OPTKR))) / 1000]
rm(dx_condor_key)
dx_condor_key <- data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
# ------------------------------------------------------------------------------
dx_condor_key[, id_strike:= rleid(value), by = .(TKR, rleid(TKR))]
# ------------------------------------------------------------------------------
# add multiple columns to a data.table
dx_condor_key[, .(id_strike = rleid(value),
strike    = as.numeric(substr(OPTKR, nchar(OPTKR) - 7, nchar(OPTKR))) / 1000),
by = .(TKR, rleid(TKR))]
dx_condor_key <- data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
# ------------------------------------------------------------------------------
dx_condor_key[, id_strike:= rleid(value), by = .(TKR, rleid(TKR))]
rm(dx_condor_key)
dx_condor_key <- data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
# ------------------------------------------------------------------------------
dx_condor_key[, id_strike:= rleid(value), by = .(TKR, rleid(TKR))]
rm_dx_condor_key
dx_condor_key <- data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
# ------------------------------------------------------------------------------
dx_condor_key[, id_strike:= rleid(value), by = .(TKR, rleid(TKR))]
names(dx_condor_key)[c(2:3)] <- c("CMPRICE", "OPTKR")
# ------------------------------------------------------------------------------
# add multiple columns to a data.table
dx_condor_key[, .(id_strike = rleid(value),
strike    = as.numeric(substr(OPTKR, nchar(OPTKR) - 7, nchar(OPTKR))) / 1000),
by = .(TKR, rleid(TKR))]
dx_condor_key <- data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
# ------------------------------------------------------------------------------
dx_condor_key[, id_strike:= rleid(value), by = .(TKR, rleid(TKR))]
names(dx_condor_key)[c(2:3)] <- c("CMPRICE", "OPTKR")
dx_condor_key <- data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
# ------------------------------------------------------------------------------
dx_condor_key[, id_strike:= rleid(value), by = .(TKR, rleid(TKR))]
names(dx_condor_key)[c(2:3)] <- c("CMPRICE", "OPTKR")
dx_condor_key
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
dx_condor_key <- data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
dx_condor_key <- data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
dx_condor_key  data.table::setorder(
dx_condor_key <<-  data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
z <<-  data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
dx_condor_key
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
glimpse(dx_condor_key)
dx_condor_key <<- data.table::setorder(
data.table::melt(dt_gf,
id = 1:3,                              # TKR, 'C/P' = 'C', STRIKE
measure = c(21, 9, 27, 15)             # i.lag_1_optkr, lag_0_optkr, i.lead_0_optkr, lead_1_optkr
), # bid/ask
"TKR"
)[
, c(1, 3, 5)
]
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
dx_condor_key
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
glimpse(dx_condor_key)
dx_condor_key
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
glimpse(dx_condor_key)
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
glimpse(dx_condor_key)
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
glimpse(dx_condor_key)
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
glimpse(dx_condor_key)
View(dx_condor_key)
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
View(dx_condor_key)
dx_condor_key[, .(strike    = as.numeric(substr(OPTKR, nchar(OPTKR) - 7, nchar(OPTKR))) / 1000)]
View(dx_condor_key)
dx_condor_key <<- dx_condor_key[, .(strike    = as.numeric(substr(OPTKR, nchar(OPTKR) - 7, nchar(OPTKR))) / 1000)]
View(dx_condor_key)
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
glimpse(dx_condor_key)
viewxl:::view_in_xl()
fwrite(dx_condor_key, "dx_condor_key.csv")
data.table::fwrite(dx_condor_key, here::here("reports", "dx_condor_key.csv"))
dx_condor_roi
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
glimpse(dx_condor_key)
dx_condor_key[!(id_strike > 1 & id_strike < 4), ][
dx_blob,
nomatch = 0
][
, c(1:4, 22, 5)
]
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
dx_condor_key[!(id_strike > 1 & id_strike < 4), ][
dx_blob,
nomatch = 0
][
, c(1:4, 22, 5)
]
dx_condor_key[ ,2]
dx_condor_key[id_strike == 4 ,5]
dx_condor_key[id_strike = 4, 4]
dx_condor_key[id_strike == 4, 4]
dx_condor_key[id_strike == 4, 5]
dx_condor_key[id_strike == 2, 5]
dx_condor_key[id_strike == 1, 5]
dx_condor_key[id_strike == 3, 5]
dx_condor_roi[, 2]
dx_condor_roi <-
cbind(
dx_condor_max_profit[
dx_condor_max_loss,
on = .(TKR)
][
, roi := scales::percent(profit / loss)
],
#    as.Date(date_run, format = "%y%m%d"),
date_run,
as.Date(mid(dx_condor_key[, 3], 10, 6), format = "%y%m%d")
)[
, setnames(.SD, c("V2", "V3"), c("date_run", "date_exp"))
][, .(TKR, profit, loss, roi, date_exp, date_run)][
unique()
]
dx_condor_roi <-
cbind(
dx_condor_max_profit[
dx_condor_max_loss,
on = .(TKR)
][
, roi := scales::percent(profit / loss)
],
#    as.Date(date_run, format = "%y%m%d"),
date_run,
as.Date(mid(dx_condor_key[, 3], 10, 6), format = "%y%m%d")
)[
, setnames(.SD, c("V2", "V3"), c("date_run", "date_exp"))
][, .(TKR, profit, loss, roi, date_exp, date_run)][
unique
]
dx_condor_roi <-
cbind(
dx_condor_max_profit[
dx_condor_max_loss,
on = .(TKR)
][
, roi := scales::percent(profit / loss)
],
#    as.Date(date_run, format = "%y%m%d"),
date_run,
as.Date(mid(dx_condor_key[, 3], 10, 6), format = "%y%m%d")
)[
, setnames(.SD, c("V2", "V3"), c("date_run", "date_exp"))
][, .(TKR, profit, loss, roi, date_exp, date_run)]
dx_condor_roi <-
cbind(
dx_condor_max_profit[
dx_condor_max_loss,
on = .(TKR)
][
, roi := scales::percent(profit / loss)
],
#    as.Date(date_run, format = "%y%m%d"),
date_run,
as.Date(mid(dx_condor_key[, 3], 10, 6), format = "%y%m%d")
)[
, setnames(.SD, c("V2", "V3"), c("date_run", "date_exp"))
][, .(TKR, profit, loss, roi, date_exp, date_run)][
unique()
]
dx_condor_roi <-
cbind(
dx_condor_max_profit[
dx_condor_max_loss,
on = .(TKR)
][
, roi := scales::percent(profit / loss)
],
#    as.Date(date_run, format = "%y%m%d"),
date_run,
as.Date(mid(dx_condor_key[, 3], 10, 6), format = "%y%m%d")
)[
, setnames(.SD, c("V2", "V3"), c("date_run", "date_exp"))
][, .(TKR, profit, loss, roi, date_exp, date_run)][
unique(dx_condor_roi)
]
dx_condor_roi <-
cbind(
dx_condor_max_profit[
dx_condor_max_loss,
on = .(TKR)
][
, roi := scales::percent(profit / loss)
],
#    as.Date(date_run, format = "%y%m%d"),
date_run,
as.Date(mid(dx_condor_key[, 3], 10, 6), format = "%y%m%d")
)[
, setnames(.SD, c("V2", "V3"), c("date_run", "date_exp"))
][, .(TKR, profit, loss, roi, date_exp, date_run)]
dx_condor_roi <-
unique(cbind(
dx_condor_max_profit[
dx_condor_max_loss,
on = .(TKR)
][
, roi := scales::percent(profit / loss)
],
#    as.Date(date_run, format = "%y%m%d"),
date_run,
as.Date(mid(dx_condor_key[, 3], 10, 6), format = "%y%m%d")
)[
, setnames(.SD, c("V2", "V3"), c("date_run", "date_exp"))
][, .(TKR, profit, loss, roi, date_exp, date_run)]
)
dx_condor_roi
dx_condor_roi <-
unique(
cbind(
dx_condor_max_profit[
dx_condor_max_loss,
on = .(TKR)
][
, roi := scales::percent(profit / loss)
],
#    as.Date(date_run, format = "%y%m%d"),
date_run,
as.Date(mid(dx_condor_key[, 3], 10, 6), format = "%y%m%d")
)[
, setnames(.SD, c("V2", "V3"), c("date_run", "date_exp"))
][, .(TKR, profit, loss, roi, date_exp, date_run)]
)
dx_condor_roi
dx_condor_pop[,8]
dx_condor_pop[1,8]
glimpse(dx_condor_pop[,8])
payoffs <- numeric(num_simulations)
num_simulations     <- 10000
payoffs <- numeric(num_simulations)
payoffs
dx_condor_key
dx_condor_roi
dx_condor_pop
dx_condor_pop <<- unique(dx_condor_pop)
dx_condor_pop <<-
unique(
cbind(
dx_blob[dx_condor_roi, nomatch = 0][
, .SD[1], by = TKR, .SDcols = c(1,8:9,55,15)][
dx_date_exp, on = .(EXPDAY), nomatch = 0][
,-c(7:8)][,
date_exp_diff_yr := diff/365][,
sigma :=  (VOLF/100) * sqrt(as.double.difftime(date_exp_diff_yr))][
dx_condor_max_profit, nomatch = 0][,-11][,
`:=`(breakeven_upper = CMPRICE + profit,
breakeven_lower = CMPRICE - profit)
#            breakeven_upper :=  CMPRICE + profit
],
#          dx_condor_strike_disp, nomatch = 0],
dx_int_rate)
)
dx_condor_roi
dx_condor_pop
dx_blob[dx_condor_roi, nomatch = 0][
, .SD[1], by = TKR, .SDcols = c(1:55)]
glimpse(dx_condor_pop)
dx_condor_pop[,4]
dx_condor_pop[,4]/100
View(dx_condor_strike_disp)
View(dx_condor_strike)
View(dx_condor_roi)
View(dx_condor_key)
data.table::setkey(dx_condor_key, TKR, id_strike)
dx_condor_key
glimpse(dx_condor_pop)
dx_condor_pop[,11]
dx_condor_pop[,11]-dx_condor_pop[,12]
(dx_condor_roi[,2]-(dx_condor_pop[,11]-dx_condor_pop[,12]))/dx_condor_roi[,2]
class(dx_condor_roi[,2]-(dx_condor_pop[,11]-dx_condor_pop[,12]))/dx_condor_roi[,2]
class((dx_condor_roi[,2]-(dx_condor_pop[,11]-dx_condor_pop[,12]))/dx_condor_roi[,2]
class((dx_condor_roi[,2]-(dx_condor_pop[,11]-dx_condor_pop[,12]))/dx_condor_roi[,2])
glimpse((dx_condor_roi[,2]-(dx_condor_pop[,11]-dx_condor_pop[,12]))/dx_condor_roi[,2])
dx_condor_pop[,11]-dx_condor_pop[,12]
(7.96-15.92)/7.96
scales::parse_format((7.96-15.92)/7.96)
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
library(ggplot2)
# Iron condor parameters
current_stock_price <- 113.17
upper_call_strike <- 120
lower_call_strike <- 110
lower_put_strike <- 115
upper_put_strike <- 105
expiration_date <- as.Date("2023-08-18")
# Calculate entry credit, maximum risk, maximum return, max return on risk, and breakevens
entry_credit <- upper_call_strike - lower_call_strike
maximum_risk <- upper_call_strike - lower_call_strike - (upper_put_strike - lower_put_strike)
maximum_return <- entry_credit
max_return_on_risk <- maximum_return / maximum_risk
breakeven_call <- upper_call_strike + entry_credit
breakeven_put <- lower_put_strike - entry_credit
# Create a sequence of weekly dates until expiration
weekly_dates <- seq(Sys.Date(), expiration_date, by = "week")
# Calculate probability of profit at each weekly interval
probability_of_profit <- rep(0, length(weekly_dates))
for (i in 1:length(weekly_dates)) {
days_to_expiration <- as.numeric(expiration_date - weekly_dates[i])
probability_of_profit[i] <- pnorm((current_stock_price - lower_call_strike) / days_to_expiration) +
pnorm((upper_put_strike - current_stock_price) / days_to_expiration) -
pnorm((current_stock_price - upper_call_strike) / days_to_expiration) -
pnorm((lower_put_strike - current_stock_price) / days_to_expiration)
}
# Create a data frame with the parameters and probabilities
df <- data.frame(
Date = weekly_dates,
Entry_Credit = entry_credit,
Maximum_Risk = maximum_risk,
Maximum_Return = maximum_return,
Max_Return_on_Risk = max_return_on_risk,
Breakeven_Call = breakeven_call,
Breakeven_Put = breakeven_put,
Probability_of_Profit = probability_of_profit
)
# Plotting
ggplot(df, aes(x = Date)) +
geom_line(aes(y = Entry_Credit, color = "Entry Credit")) +
geom_line(aes(y = Maximum_Risk, color = "Maximum Risk")) +
geom_line(aes(y = Maximum_Return, color = "Maximum Return")) +
geom_line(aes(y = Max_Return_on_Risk, color = "Max Return on Risk")) +
geom_line(aes(y = Breakeven_Call, color = "Breakeven (Call)")) +
geom_line(aes(y = Breakeven_Put, color = "Breakeven (Put)")) +
geom_line(aes(y = Probability_of_Profit * 100, color = "Probability of Profit")) +
labs(x = "Date", y = "Value", color = "Parameter") +
scale_color_manual(values = c("Entry Credit" = "blue", "Maximum Risk" = "red",
"Maximum Return" = "green", "Max Return on Risk" = "orange",
"Breakeven (Call)" = "purple", "Breakeven (Put)" = "darkgreen",
"Probability of Profit" = "black")) +
theme_minimal()
Probability_of_Profit
df
library(ggplot2)
# Iron condor parameters
current_stock_price <- 113.17
upper_call_strike <- 120
lower_call_strike <- 110
lower_put_strike <- 115
upper_put_strike <- 105
expiration_date <- as.Date("2023-08-18")
# Calculate entry credit, maximum risk, maximum return, max return on risk, and breakevens
entry_credit <- upper_call_strike - lower_call_strike
maximum_risk <- upper_call_strike - lower_call_strike - (upper_put_strike - lower_put_strike)
maximum_return <- entry_credit
max_return_on_risk <- maximum_return / maximum_risk
breakeven_call <- upper_call_strike + entry_credit
breakeven_put <- lower_put_strike - entry_credit
# Create a sequence of weekly dates until expiration
weekly_dates <- seq(Sys.Date(), expiration_date, by = "week")
# Calculate probability of profit at each weekly interval
probability_of_profit <- rep(0, length(weekly_dates))
for (i in 1:length(weekly_dates)) {
days_to_expiration <- as.numeric(expiration_date - weekly_dates[i])
probability_of_profit[i] <- pnorm((current_stock_price - lower_call_strike) / days_to_expiration) +
pnorm((upper_put_strike - current_stock_price) / days_to_expiration) -
pnorm((current_stock_price - upper_call_strike) / days_to_expiration) -
pnorm((lower_put_strike - current_stock_price) / days_to_expiration)
}
# Example option position data (hypothetical)
option_prices <- c(5.2, 4.8, 4.5, 4.2, 4.0, 4.1, 4.3, 4.7, 5.0)
# Create a data frame with the parameters and probabilities
df <- data.frame(
Date = weekly_dates,
Entry_Credit = entry_credit,
Maximum_Risk = maximum_risk,
Maximum_Return = maximum_return,
Max_Return_on_Risk = max_return_on_risk,
Breakeven_Call = breakeven_call,
Breakeven_Put = breakeven_put,
Probability_of_Profit = probability_of_profit,
Option_Price = option_prices
)
df
glimpse(df)
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
dx_condor_key[!(id_strike > 1 & id_strike < 4), ][
dx_blob,
nomatch = 0
]
glimpse(dx_condor_key[!(id_strike > 1 & id_strike < 4), ][
dx_blob,
nomatch = 0
])
source("C:/Users/falkg/OneDrive/Documents/GitHub/vl_archive/vl_archive.r", echo=TRUE)
dx_condor_max_profit
dx_condor_pop
110 - 8.65
115 - 8.65
110 + 8.65
dx_condor_max_profit
setkey(dx_condor_roi, TKR, date_exp)
setkey(dx_blob, TKR, EXPDAY)
# ------------------------------------------------------------------------------
dx_condor_pop <<-
unique(
cbind(
dx_blob[dx_condor_roi, nomatch = 0][
, .SD[1], by = TKR, .SDcols = c(1,8:9,55,15)][
dx_date_exp, on = .(EXPDAY), nomatch = 0][
,-c(7:8)][,
date_exp_diff_yr := diff/365][,
sigma :=  (VOLF/100) * sqrt(as.double.difftime(date_exp_diff_yr))]
setkey(dx_condor_roi, TKR, date_exp)
dx_blob[dx_condor_roi, nomatch = 0][
, .SD[1], by = TKR, .SDcols = c(1,8:9,55,15)][
dx_date_exp, on = .(EXPDAY), nomatch = 0][
,-c(7:8)][,
date_exp_diff_yr := diff/365][,
sigma :=  (VOLF/100) * sqrt(as.double.difftime(date_exp_diff_yr))]
dx_condor_pop
dx_blob[dx_condor_roi, nomatch = 0][
, .SD[1], by = TKR, .SDcols = c(1,8:9,55,15)][
dx_date_exp, on = .(EXPDAY), nomatch = 0][
,-c(7:8)][,
date_exp_diff_yr := diff/365][,
sigma :=  (VOLF/100) * sqrt(as.double.difftime(date_exp_diff_yr))][
dx_condor_max_profit, nomatch = 0][,-11]
